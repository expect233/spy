'use client';

import { useState, useEffect } from 'react';
import { useParams, useRouter } from 'next/navigation';
import { Card, CardContent, CardDescription, CardHeader, CardTitle } from '@/components/ui/card';
import { Button } from '@/components/ui/button';
import { Badge } from '@/components/ui/badge';
import { Input } from '@/components/ui/input';
import { Room, Player, RolePrivateData, VoteResult } from '@/types';

export default function RoomPage() {
  const params = useParams();
  const router = useRouter();
  const roomCode = Array.isArray(params.code) ? params.code[0] : params.code;
  
  const [room, setRoom] = useState<Room | null>(null);
  const [currentPlayer, setCurrentPlayer] = useState<Player | null>(null);
  const [isHost, setIsHost] = useState(false);
  const [eventSource, setEventSource] = useState<EventSource | null>(null);
  const [loading, setLoading] = useState(true);
  const [error, setError] = useState<string | null>(null);
  
  // 遊戲相關狀態
  const [myRole, setMyRole] = useState<RolePrivateData | null>(null);
  const [speakText, setSpeakText] = useState('');
  const [hasSpoken, setHasSpoken] = useState(false);
  const [hasVoted, setHasVoted] = useState(false);
  const [selectedVoteTarget, setSelectedVoteTarget] = useState<string>('');
  const [gameResult, setGameResult] = useState<VoteResult | null>(null);
  
  // 房主控制
  const [undercoverCount, setUndercoverCount] = useState(1);
  const [isStarting, setIsStarting] = useState(false);

  useEffect(() => {
    const initializeRoom = async () => {
      try {
        // 檢查本地儲存的身份資訊
        const storedIsHost = localStorage.getItem('isHost') === 'true';
        const playerId = localStorage.getItem('playerId');
        
        setIsHost(storedIsHost);
        
        if (!playerId && !storedIsHost) {
          router.push('/');
          return;
        }

        // 只有在有 playerId 時才建立 SSE 連線
        if (playerId) {
          const es = new EventSource(`/api/rooms/${roomCode}/events?playerId=${playerId}`);
          setEventSource(es);

          es.onmessage = (event) => {
            try {
              const data = JSON.parse(event.data);
              handleSSEEvent(data);
            } catch (error) {
              console.error('解析 SSE 事件失敗:', error);
            }
          };

          es.onerror = (error) => {
            console.error('SSE 連線錯誤:', error);
            setError('連線中斷，請重新整理頁面');
          };
        }

        setLoading(false);
      } catch (error) {
        console.error('初始化房間失敗:', error);
        setError('載入房間失敗');
        setLoading(false);
      }
    };

    initializeRoom();

    return () => {
      if (eventSource) {
        eventSource.close();
      }
    };
  }, [roomCode, router]);

  const handleSSEEvent = (event: { type: string; data?: unknown }) => {
    switch (event.type) {
      case 'room.sync':
        if (event.data && typeof event.data === 'object' && 'room' in event.data) {
          const roomData = event.data.room as Room;
          setRoom(roomData);
          const playerId = localStorage.getItem('playerId');
          if (playerId) {
            const player = roomData.players.find((p: Player) => p.id === playerId);
            setCurrentPlayer(player || null);
          }
          setUndercoverCount(roomData.config.undercoverCount);
        }
        break;

      case 'room.updated':
        if (event.data && typeof event.data === 'object' && 'players' in event.data) {
          const players = event.data.players as Player[];
          setRoom(prev => prev ? { ...prev, players } : null);
        }
        break;

      case 'game.started':
        setRoom(prev => prev ? { ...prev, state: 'speaking' } : null);
        break;

      case 'role.private':
        if (event.data && typeof event.data === 'string') {
          setMyRole(event.data);
        }
        break;

      case 'speak.submitted':
        // 更新發言列表
        setRoom(prev => {
          if (!prev) return null;
          const newSpeak = { playerId: event.data?.playerId, text: event.data?.text };
          return { ...prev, speaks: [...prev.speaks, newSpeak] };
        });
        break;

      case 'vote.open':
        setRoom(prev => prev ? { ...prev, state: 'voting' } : null);
        break;

      case 'vote.result':
        setGameResult(event.data);
        setRoom(prev => prev ? { ...prev, state: 'ended' } : null);
        break;

      case 'error':
        setError(event.data?.message);
        break;
    }
  };

  const handleReady = async () => {
    if (!currentPlayer) return;
    
    try {
      const playerToken = localStorage.getItem('playerToken');
      const response = await fetch(`/api/rooms/${roomCode}/ready`, {
        method: 'POST',
        headers: { 'Content-Type': 'application/json' },
        body: JSON.stringify({
          playerToken,
          ready: !currentPlayer.isReady
        }),
      });

      const result = await response.json();
      if (!result.ok) {
        setError(result.error);
      }
    } catch (error) {
      setError('設定準備狀態失敗');
    }
  };

  const handleUpdateConfig = async (newUndercoverCount: number) => {
    try {
      const hostToken = localStorage.getItem('hostToken');
      const response = await fetch(`/api/rooms/${roomCode}/config`, {
        method: 'POST',
        headers: { 'Content-Type': 'application/json' },
        body: JSON.stringify({
          hostToken,
          undercoverCount: newUndercoverCount
        }),
      });

      const result = await response.json();
      if (!result.ok) {
        setError(result.error);
      }
    } catch (error) {
      setError('更新配置失敗');
    }
  };

  const handleStartGame = async () => {
    setIsStarting(true);
    try {
      const hostToken = localStorage.getItem('hostToken');
      const response = await fetch(`/api/rooms/${roomCode}/start`, {
        method: 'POST',
        headers: { 'Content-Type': 'application/json' },
        body: JSON.stringify({ hostToken }),
      });

      const result = await response.json();
      if (!result.ok) {
        setError(result.error);
      }
    } catch (error) {
      setError('開始遊戲失敗');
    } finally {
      setIsStarting(false);
    }
  };

  const handleSpeak = async () => {
    if (!speakText.trim()) return;
    
    try {
      const playerToken = localStorage.getItem('playerToken');
      const response = await fetch(`/api/rooms/${roomCode}/speak`, {
        method: 'POST',
        headers: { 'Content-Type': 'application/json' },
        body: JSON.stringify({
          playerToken,
          text: speakText.trim()
        }),
      });

      const result = await response.json();
      if (result.ok) {
        setHasSpoken(true);
        setSpeakText('');
      } else {
        setError(result.error);
      }
    } catch (error) {
      setError('提交發言失敗');
    }
  };

  const handleVote = async () => {
    if (!selectedVoteTarget) return;
    
    try {
      const playerToken = localStorage.getItem('playerToken');
      const response = await fetch(`/api/rooms/${roomCode}/vote`, {
        method: 'POST',
        headers: { 'Content-Type': 'application/json' },
        body: JSON.stringify({
          playerToken,
          targetId: selectedVoteTarget
        }),
      });

      const result = await response.json();
      if (result.ok) {
        setHasVoted(true);
        setSelectedVoteTarget('');
      } else {
        setError(result.error);
      }
    } catch (error) {
      setError('提交投票失敗');
    }
  };

  const copyRoomCode = () => {
    if (roomCode) {
      navigator.clipboard.writeText(roomCode);
      alert('房間號碼已複製到剪貼簿');
    }
  };

  if (loading) {
    return (
      <div className="min-h-screen bg-gradient-to-br from-slate-900 to-slate-800 flex items-center justify-center">
        <div className="text-center">
          <div className="animate-spin rounded-full h-12 w-12 border-b-2 border-blue-400 mx-auto mb-4"></div>
          <p className="text-slate-300">載入中...</p>
        </div>
      </div>
    );
  }

  if (error) {
    return (
      <div className="min-h-screen bg-gradient-to-br from-slate-900 to-slate-800 flex items-center justify-center p-4">
        <Card className="w-full max-w-md">
          <CardHeader>
            <CardTitle className="text-red-600">錯誤</CardTitle>
          </CardHeader>
          <CardContent>
            <p className="text-gray-600 mb-4">{error}</p>
            <Button onClick={() => router.push('/')} className="w-full">
              返回首頁
            </Button>
          </CardContent>
        </Card>
      </div>
    );
  }

  if (!room) {
    return (
      <div className="min-h-screen bg-gradient-to-br from-slate-900 to-slate-800 flex items-center justify-center">
        <p className="text-slate-300">房間不存在</p>
      </div>
    );
  }

  return (
    <div className="min-h-screen bg-gradient-to-br from-slate-900 to-slate-800 p-4">
      <div className="max-w-4xl mx-auto space-y-6">
        {/* 房間標題 */}
        <Card>
          <CardHeader>
            <div className="flex items-center justify-between">
              <div>
                <CardTitle className="text-2xl">房間 {roomCode}</CardTitle>
                <CardDescription>
                  {room.state === 'lobby' && '等待開始'}
                  {room.state === 'speaking' && '發言階段'}
                  {room.state === 'voting' && '投票階段'}
                  {room.state === 'ended' && '遊戲結束'}
                </CardDescription>
              </div>
              <Button onClick={copyRoomCode} variant="outline">
                複製房號
              </Button>
            </div>
          </CardHeader>
        </Card>

        {/* 私訊角色資訊 */}
        {myRole && (
          <Card className="border-2 border-yellow-300 bg-yellow-50">
            <CardHeader>
              <CardTitle className="text-lg">您的資訊</CardTitle>
            </CardHeader>
            <CardContent>
              <div className="flex items-center gap-4">
                <div>
                  <p className="text-sm text-gray-600">您的詞語</p>
                  <p className="text-xl font-bold">{myRole.word}</p>
                </div>
                <Badge variant={myRole.role === 'undercover' ? 'destructive' : 'default'}>
                  {myRole.role === 'undercover' ? '臥底' : '平民'}
                </Badge>
              </div>
            </CardContent>
          </Card>
        )}

        {/* 玩家列表 */}
        <Card>
          <CardHeader>
            <CardTitle>玩家列表 ({room.players.length})</CardTitle>
          </CardHeader>
          <CardContent>
            <div className="grid grid-cols-1 sm:grid-cols-2 lg:grid-cols-3 gap-3">
              {room.players.map((player) => (
                <div
                  key={player.id}
                  className={`p-3 rounded-lg border ${
                    player.id === currentPlayer?.id ? 'border-blue-500 bg-blue-50' : 'border-gray-200'
                  }`}
                >
                  <div className="flex items-center justify-between">
                    <span className="font-medium">{player.name}</span>
                    <div className="flex gap-1">
                      {player.isHost && (
                        <Badge variant="secondary">房主</Badge>
                      )}
                      {room.state === 'lobby' && (
                        <Badge variant={player.isReady ? 'default' : 'outline'}>
                          {player.isReady ? '已準備' : '未準備'}
                        </Badge>
                      )}
                    </div>
                  </div>
                </div>
              ))}
            </div>
          </CardContent>
        </Card>

        {/* 大廳階段 - 房主控制面板 */}
        {room.state === 'lobby' && isHost && (
          <Card>
            <CardHeader>
              <CardTitle>房主控制</CardTitle>
            </CardHeader>
            <CardContent className="space-y-4">
              <div>
                <label className="block text-sm font-medium mb-2">
                  臥底數量: {undercoverCount}
                </label>
                <div className="flex gap-2">
                  {[1, 2, 3].map((count) => (
                    <Button
                      key={count}
                      variant={undercoverCount === count ? 'default' : 'outline'}
                      size="sm"
                      onClick={() => {
                        setUndercoverCount(count);
                        handleUpdateConfig(count);
                      }}
                      disabled={count >= room.players.length}
                    >
                      {count}
                    </Button>
                  ))}
                </div>
              </div>
              <Button
                onClick={handleStartGame}
                disabled={
                  isStarting ||
                  !room.players.every(p => p.isReady) ||
                  room.players.length < 3
                }
                className="w-full"
                size="lg"
              >
                {isStarting ? '開始中...' : '開始遊戲'}
              </Button>
              {room.players.length < 3 && (
                <p className="text-sm text-red-600">至少需要 3 名玩家</p>
              )}
              {!room.players.every(p => p.isReady) && (
                <p className="text-sm text-yellow-600">等待所有玩家準備</p>
              )}
            </CardContent>
          </Card>
        )}

        {/* 大廳階段 - 玩家準備按鈕 */}
        {room.state === 'lobby' && !isHost && currentPlayer && (
          <Card>
            <CardContent className="pt-6">
              <Button
                onClick={handleReady}
                variant={currentPlayer.isReady ? 'outline' : 'default'}
                className="w-full"
                size="lg"
              >
                {currentPlayer.isReady ? '取消準備' : '準備就緒'}
              </Button>
            </CardContent>
          </Card>
        )}

        {/* 發言階段 */}
        {room.state === 'speaking' && (
          <>
            {/* 發言輸入 */}
            {!hasSpoken && currentPlayer && (
              <Card>
                <CardHeader>
                  <CardTitle>您的發言</CardTitle>
                  <CardDescription>
                    請用一句話描述您的詞語（不要直接說出詞語）
                  </CardDescription>
                </CardHeader>
                <CardContent className="space-y-4">
                  <Input
                    placeholder="輸入您的發言..."
                    value={speakText}
                    onChange={(e) => setSpeakText(e.target.value.slice(0, 100))}
                    maxLength={100}
                  />
                  <div className="flex justify-between items-center">
                    <span className="text-sm text-gray-500">
                      {speakText.length}/100
                    </span>
                    <Button
                      onClick={handleSpeak}
                      disabled={!speakText.trim()}
                    >
                      提交發言
                    </Button>
                  </div>
                </CardContent>
              </Card>
            )}

            {/* 發言列表 */}
            <Card>
              <CardHeader>
                <CardTitle>
                  發言記錄 ({room.speaks.length}/{room.players.length})
                </CardTitle>
              </CardHeader>
              <CardContent>
                {room.speaks.length === 0 ? (
                  <p className="text-gray-500 text-center py-4">
                    等待玩家發言...
                  </p>
                ) : (
                  <div className="space-y-3">
                    {room.speaks.map((speak, index) => {
                      const speaker = room.players.find(p => p.id === speak.playerId);
                      return (
                        <div key={index} className="p-3 bg-gray-50 rounded-lg">
                          <div className="flex justify-between items-start mb-2">
                            <span className="font-medium">{speaker?.name}</span>
                            <span className="text-xs text-gray-500">#{index + 1}</span>
                          </div>
                          <p className="text-gray-700">{speak.text}</p>
                        </div>
                      );
                    })}
                  </div>
                )}
              </CardContent>
            </Card>
          </>
        )}

        {/* 投票階段 */}
        {room.state === 'voting' && (
          <>
            {/* 投票選擇 */}
            {!hasVoted && currentPlayer && (
              <Card>
                <CardHeader>
                  <CardTitle>投票選擇</CardTitle>
                  <CardDescription>
                    選擇您認為最可疑的玩家
                  </CardDescription>
                </CardHeader>
                <CardContent className="space-y-4">
                  <div className="grid grid-cols-1 sm:grid-cols-2 gap-3">
                    {room.players
                      .filter(p => p.id !== currentPlayer.id)
                      .map((player) => (
                        <Button
                          key={player.id}
                          variant={selectedVoteTarget === player.id ? 'default' : 'outline'}
                          onClick={() => setSelectedVoteTarget(player.id)}
                          className="justify-start"
                        >
                          {player.name}
                        </Button>
                      ))}
                  </div>
                  <Button
                    onClick={handleVote}
                    disabled={!selectedVoteTarget}
                    className="w-full"
                  >
                    確認投票
                  </Button>
                </CardContent>
              </Card>
            )}

            {/* 投票進度 */}
            <Card>
              <CardHeader>
                <CardTitle>投票進度</CardTitle>
              </CardHeader>
              <CardContent>
                <div className="flex items-center gap-4">
                  <div className="flex-1 bg-gray-200 rounded-full h-2">
                    <div
                      className="bg-blue-600 h-2 rounded-full transition-all"
                      style={{
                        width: `${(room.votes.length / room.players.length) * 100}%`
                      }}
                    ></div>
                  </div>
                  <span className="text-sm text-gray-600">
                    {room.votes.length}/{room.players.length}
                  </span>
                </div>
                <p className="text-sm text-gray-500 mt-2">
                  等待所有玩家投票...
                </p>
              </CardContent>
            </Card>
          </>
        )}

        {/* 遊戲結果 */}
        {room.state === 'ended' && gameResult && (
          <Card className="border-2 border-green-300 bg-green-50">
            <CardHeader>
              <CardTitle className="text-xl">遊戲結束</CardTitle>
            </CardHeader>
            <CardContent className="space-y-4">
              <div className="text-center">
                <p className="text-lg mb-2">
                  被淘汰的玩家: {room.players.find(p => p.id === gameResult.eliminatedId)?.name}
                </p>
                <Badge
                  variant={gameResult.eliminatedRole === 'undercover' ? 'destructive' : 'default'}
                  className="text-lg px-4 py-2"
                >
                  {gameResult.eliminatedRole === 'undercover' ? '臥底' : '平民'}
                </Badge>
              </div>

              <div className="text-center">
                <p className="text-xl font-bold mb-2">
                  {gameResult.winner === 'civilian' ? '平民勝利！' : '臥底勝利！'}
                </p>
                <p className="text-gray-600">
                  {gameResult.winner === 'civilian'
                    ? '成功找出了臥底'
                    : '臥底成功隱藏身份'}
                </p>
              </div>

              {/* 角色揭露 */}
              {gameResult.assignments && (
                <div>
                  <h4 className="font-medium mb-3">角色揭露</h4>
                  <div className="grid grid-cols-1 sm:grid-cols-2 gap-2">
                    {gameResult.assignments.map((assignment) => {
                      const player = room.players.find(p => p.id === assignment.playerId);
                      return (
                        <div key={assignment.playerId} className="flex items-center justify-between p-2 bg-white rounded">
                          <span>{player?.name}</span>
                          <div className="flex items-center gap-2">
                            <Badge variant={assignment.role === 'undercover' ? 'destructive' : 'default'}>
                              {assignment.role === 'undercover' ? '臥底' : '平民'}
                            </Badge>
                            <span className="text-sm text-gray-600">{assignment.word}</span>
                          </div>
                        </div>
                      );
                    })}
                  </div>
                </div>
              )}

              <div className="flex gap-3">
                <Button onClick={() => router.push('/')} variant="outline" className="flex-1">
                  返回首頁
                </Button>
                <Button onClick={() => window.location.reload()} className="flex-1">
                  再來一局
                </Button>
              </div>
            </CardContent>
          </Card>
        )}
      </div>
    </div>
  );
}
